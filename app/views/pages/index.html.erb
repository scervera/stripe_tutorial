<h1>How to Use This Authorization Demo</h1>
<p>This web app has been created to demonstrate the use of the <%= link_to 'Devise gem', "https://github.com/heartcombo/devise" %> to authenticate users, and the <%= link_to 'Pundit gem', "https://github.com/varvet/pundit" %> to authorize users to see certain content or take certain
actions based upon defined policies.</p>

<p>There are six accounts created for the demo, each having one of the four types of roles defined in this application.</p>
<ul>
    <li>Admin email: admin@example.com password: password</li>
    <li>Editor email: editor@example.com password: password</li>
    <li>Leader email: leader@example.com password: password</li>
    <li>Participant email: user1@example.com password: password</li>
    <li>Participant email: user1@example.com password: password</li>
    <li>Participant email: user1@example.com password: password</li>
</ul>

<p>To demonstrate the various levels of access, follow the step by step instructions below:</p>
<ol>
    <li>Log in as "user1@example.com" and navigate to Posts.</li>
    <li>Create a new post and submit.</li>
    <li>Show the new post you created. Note that there is an edit button. That functionality is available to the Admin and Leader roles and also to the owner of the post.</li>
    <li>Now log out. Log in again, but this time as user2@example.com</li>
    <li>Find the Post you just created as user1@example.com. Notice that the edit link is not visible.</li>
    <li>Try to change the URL in the browser by appending the current url of the post with "/edit" to access the update action.</li>
    <li>The form now shows on screen. Try to make a change to the title or subtitle of the Post. Click the "Update" button. Notice that there is an alert saying "You are not authorized to perform this action."</li>
</ol>

<p>Notice that we hid the Update button from unauthorized users (though this does not require Pundit authorization). However, even if the user tries to circumvent
this by adding in the appropriate RESTful action, they are blocked programmatically at the controller level by Pundit policies
configured in the application.</p>

<ol>
    <li>Log out.</li>
    <li>Log back in but this time as an editor or admin.</li>
    <li>Look at the post created above. Notice that the edit button is now available.</li>
    <li>Make a change in the form to the title or subtitle and click Update.</li>
    <li>Now you receive a success notice because a change was made by an authorized user as per Pundit policies we configured.</li>
    <li>Log out</li>
</ol>

<p>Next we want to demonstrate that we can block the ability of certain users from destroying a Post. We want the creator of the post to 
be able to destroy it. And we see a need for an admin to destroy a post a user creates due to objectionable content, but we may not want
give that permission to an editor. So we have configured our Pundit policy to allow the admin role to destroy Posts and also the
creator of the post, but not anyone else.</p>

<ol>
    <li>Log in as user1@example.com</li>
    <li>Create 3 posts</li>
    <li>Go to <%= link_to 'Posts', posts_path %> page to see the 3 posts just created. Click on destroy next to one of them. Notice
    user1@example.com is able to destroy the post. Now log out.</li>
    <li>Log in as editor@example.com.</li>
    <li>Go to <%= link_to 'Posts', posts_path %> page. Click on destroy next to one of the posts. Notice that you receive an alert saying "You are not authorized to perform this action."</li>
    <li>Log out.</li>
    <li>Log in as admin@example.com</li>
    <li>Go to <%= link_to 'Posts', posts_path %> page. Click on destroy next to one of the posts. Notice that you are successful in destroying the post because you are authorized to do so.</li>
</ol>